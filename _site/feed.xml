<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 03 Jul 2016 17:45:49 +0800</pubDate>
    <lastBuildDate>Sun, 03 Jul 2016 17:45:49 +0800</lastBuildDate>
    <generator>Jekyll v2.2.0</generator>
    
      <item>
        <title>线程安全的bool并发访问</title>
        <description>&lt;h1 id=&quot;bool&quot;&gt;线程安全的bool并发访问&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@(c++)[多线程&lt;/td&gt;
      &lt;td&gt;volatile]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;bool变量只有两个状态，对它的读写是原子操作。对bool赋值的汇编代码如下：
&lt;code&gt;c++
mov byte ptr [bVar], 0
或者
mov byte ptr [bVar], 1
&lt;/code&gt;
考虑两个线程同时对同一个bool变量进行写操作，或者一个线程进行对bool变量进行写操作，同时另一个线程对该变量进行读操作。虽然我们并不知道读到的值是原始值还是更新后的值，但我们知道读到的值肯定是其中之一。对大多数应用程序来说，这已经足够了。那是不是说对bool变量的并发访问不需要保护呢？答案是否定的。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;并发访问共享变量的两个问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;高速缓存不一致&lt;/strong&gt; ：变量被一个线程修改，该变量的值会更新到在内存以及在其中一个CPU的高速缓存上，但是另一个CPU认为这个变量没有变化，在它的高速缓存中还保存着修改前的值；&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;指令重排&lt;/strong&gt; ：编译器可能会对指令进行重排；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;高速缓存不一致&lt;/h4&gt;
&lt;p&gt;第一个问题可以用volatile限定符解决。
&lt;code&gt;c++
volatile bool bVar;
&lt;/code&gt;
&amp;gt; volatile关键字指示一个字段可以由多个同时执行的线程修改。声明为 volatile的字段不受编译器优化（假定由单个线程访问）的限制。这样可以确保该字段在任何时间呈现的都是最新的值。    —— &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/12a04hfd.aspx&quot;&gt;msdn&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下用一个例子直观展示volatile的作用。
``` c++
bool g_finishedCaculation = false;
int main()
{
	CreateThread(…, RecalcFunc,…);
	…
	//等待RecalcFunc执行完
	while (!g_finishedCaculation)
		;
	…
}&lt;/p&gt;

&lt;p&gt;DWORD RecalcFunc(PVOID pvParam)
{
	//执行计算
	…
	g_finishedCaculation = true;
	return 0;
}
```&lt;/p&gt;

&lt;p&gt;g_finishedCaculation没有加上volatile限定符，编译器可能会对g_finishedCaculation的访问进行优化。优化后的汇编伪代码：
&lt;code&gt;c++
mov Reg0, [g_finishedCaculation]           	;将变量的值拷贝到寄存器
Label: TEST Reg0, 0							;变量的值是否为0
JMP Reg0 == 0, Label						;如果值为0再测试
...											;值不为0，退出循环
&lt;/code&gt;
在这个优化中编译器把bool变量的值载入到CPU的寄存器中，这个操作只进行一次。然后重复对CPU寄存器中的值进行测试。与每次都从变量所在的内存地址取得变量的值并进行测试相比，这样做当然能够得到更好的性能。但是如果编译器进行此类优化，那么线程会陷入无限循环。而加上volatile限定符后可以确保每次访问都是从内存中读取的。
####指令重排
使用volatile限定符还不够，因为编译器可能会对指令进行重排，可能引起奇怪的问题。
使用volatile限定符后指令被重排的情况可以被总结成下表：
| 第一条指令      |    第二条指令 | 可以被交换吗？  |
| :——–: | :——–:| :–: |
| Read      | Read  |  No   |
| Read      | Write |  No  |
| Write     | Write |  No  |
| Write     | Read  |  &lt;strong&gt;Yes&lt;/strong&gt;  |
以下例子展示指令重排的影响：
``` c++
int _answer = 0;
volatile bool _complete;&lt;/p&gt;

&lt;p&gt;void Test1()
{
	_answer = 123;
	_complete = true;
}&lt;/p&gt;

&lt;p&gt;void Test2()
{
	if (_complete)
		Console.WriteLine(_answer);
}
```
如果Test1和Test2在不同线程并发执行，方法Test2有可能输出0，因为方法Test1中两句代码的顺序被调整了。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;使用std::atimic&amp;lt;bool&amp;gt;能同时解决以上两个问题，线程安全地访问共享变量。&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Jul 2016 17:39:32 +0800</pubDate>
        <link>http://yourdomain.com/%E6%8A%80%E6%9C%AF/2016/07/03/</link>
        <guid isPermaLink="true">http://yourdomain.com/%E6%8A%80%E6%9C%AF/2016/07/03/</guid>
        
        <category>c++</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 03 Apr 2016 02:39:12 +0800</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/04/03/welcome-to-jekyll/</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/04/03/welcome-to-jekyll/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
