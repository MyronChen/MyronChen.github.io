---
layout: post
title: 线程安全的bool并发访问
subtitle: 
author: MyronChen
date: 2016-07-03 23:54:22 +0800
categories: 技术
tag: c++
---

# 线程安全的bool并发访问

bool变量只有两个状态，对它的读写是原子操作。对bool赋值的汇编代码如下：

~~~ 
mov byte ptr [bVar], 0
或者
mov byte ptr [bVar], 1
~~~

考虑两个线程同时对同一个bool变量进行写操作，或者一个线程进行对bool变量进行写操作，同时另一个线程对该变量进行读操作。虽然我们并不知道读到的值是原始值还是更新后的值，但我们知道读到的值肯定是其中之一。对大多数应用程序来说，这已经足够了。那是不是说对bool变量的并发访问不需要保护呢？答案是否定的。

## 并发访问共享变量的两个问题
 
- **高速缓存不一致** ：变量被一个线程修改，该变量的值会更新到在内存以及在其中一个CPU的高速缓存上，但是另一个CPU认为这个变量没有变化，在它的高速缓存中还保存着修改前的值；
- **指令重排** ：编译器可能会对指令进行重排；

#### 高速缓存不一致
第一个问题可以用volatile限定符解决。
{% highlight ruby %}
volatile bool bVar;
{% endhighlight %}
> volatile关键字指示一个字段可以由多个同时执行的线程修改。声明为 volatile的字段不受编译器优化（假定由单个线程访问）的限制。这样可以确保该字段在任何时间呈现的都是最新的值。    —— [msdn](https://msdn.microsoft.com/en-us/library/12a04hfd.aspx)

以下用一个例子直观展示volatile的作用。

~~~
bool g_finishedCaculation = false;
int main()
{
    CreateThread(..., RecalcFunc,...);
	...
	//等待RecalcFunc执行完
	while (!g_finishedCaculation)
		;
	...
}

DWORD RecalcFunc(PVOID pvParam)
{
	//执行计算
	...
	g_finishedCaculation = true;
	return 0;
}
~~~
  
g_finishedCaculation没有加上volatile限定符，编译器可能会对g_finishedCaculation的访问进行优化。优化后的汇编伪代码：

~~~
    mov Reg0, [g_finishedCaculation]           	;将变量的值拷贝到寄存器
    Label: TEST Reg0, 0					;变量的值是否为0
    JMP Reg0 == 0, Label	   				;如果值为0再测试
    ...									;值不为0，退出循环
~~~

在这个优化中编译器把bool变量的值载入到CPU的寄存器中，这个操作只进行一次。然后重复对CPU寄存器中的值进行测试。与每次都从变量所在的内存地址取得变量的值并进行测试相比，这样做当然能够得到更好的性能。但是如果编译器进行此类优化，那么线程会陷入无限循环。而加上volatile限定符后可以确保每次访问都是从内存中读取的。
#### 指令重排
使用volatile限定符还不够，因为编译器可能会对指令进行重排，可能引起奇怪的问题。
使用volatile限定符后指令被重排的情况可以被总结成下表：

| 第一条指令      |    第二条指令 | 可以被交换吗？  |
| :--------: | :--------:| :--: |
| Read      | Read  |  No   |
| Read      | Write |  No  |
| Write     | Write |  No  |
| Write     | Read  |  **Yes**  |

以下例子展示指令重排的影响：

~~~
int _answer = 0;
volatile bool _complete;

void Test1()
{
	_answer = 123;
	_complete = true;
}

void Test2()
{
	if (_complete)
		Console.WriteLine(_answer);
}
~~~

如果Test1和Test2在不同线程并发执行，方法Test2有可能输出0，因为方法Test1中两句代码的顺序被调整了。

## 结论
使用std::atimic&lt;bool&gt;能同时解决以上两个问题，线程安全地访问共享变量。

* 1: http://www.cnblogs.com/LoveJenny/archive/2011/05/29/2060718.html


